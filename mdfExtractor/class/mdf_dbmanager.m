classdef mdf_dbmanager
    properties
        BackupDir
        BackupName
        DbFile
        Conn
        FolderTable
        XYMovieTable
        ImageStackTable
        AnalogTable
        IntegrationLogTable
    end

    methods
        function obj = mdf_dbmanager(dbfile)
            obj.BackupDir = uigetdir([],'imaging session directory');
            obj.DbFile = dbfile;
            obj = obj.detectDrive();
            obj = obj.scanFolders();
        end

        function obj = detectDrive(obj)
            if ispc
                [drive_letter, ~, ~] = fileparts(obj.BackupDir);
                [~, cmdout] = system(['vol ', drive_letter(1:2)]);
                
                tokens = regexp(cmdout, '\s*Volume in drive (?<Drive>[A-Z]) is (?<Label>.*?) Volume Serial Number', 'names');
                obj.BackupName = strtrim(tokens.Label);
            elseif ismac || isunix
                disp('not yet')
            else
                error('Unsupported OS.');
            end
        end

        function obj = scanFolders(obj)
            all_mdf = dir(fullfile(obj.BackupDir, '**', '*.mdf'));
            unique_folders = unique({all_mdf.folder});
            numFolders = numel(unique_folders);
        
            Date = strings(numFolders, 1);
            MouseNum = strings(numFolders, 1);
            Condition = strings(numFolders, 1);
        
            PrimaryPath = unique_folders';
            PrimaryDrive = repmat(string(obj.BackupName), numFolders, 1);
        
            is_mouse_exp = false(numFolders, 1);
        
            mouse_keywords = {'hql', 'JRigkl'};
        
            for i = 1:numFolders
                [~, fname] = fileparts(unique_folders{i});
                parts = split(fname, '_');
        
                date_str = "";
                mouse_str = "";
                condition_parts = strings(0,1);
        
                for j = 1:numel(parts)
                    part = parts{j};
                    
                    if strlength(part) == 6 && all(isstrprop(part, 'digit'))
                        date_str = part;
                 
                    elseif any(contains(part, mouse_keywords, 'IgnoreCase', true))
                        mouse_str = part;
                    else
                        condition_parts(end+1) = part;
                    end
                end
        
                Date(i) = date_str;
                MouseNum(i) = mouse_str;
                Condition(i) = strjoin(condition_parts, '_');
        
                is_mouse_exp(i) = ~isempty(mouse_str);
            end
        
            obj.FolderTable = table(Date, MouseNum, Condition, is_mouse_exp, PrimaryPath, PrimaryDrive, ...
                'VariableNames', {'Date','MouseNum','Condition','IsMouseExperiment','PrimaryPath','PrimaryDrive'});
        end

        function obj = processFiles(obj)
            all_mdf = dir(fullfile(obj.BackupDir, '**', '*.mdf'));
            folder_list = obj.FolderTable.PrimaryPath;
            obj.XYMovieTable = table();
            obj.ImageStackTable = table();
            obj.AnalogTable = table();

            for i = 1:numel(all_mdf)
                [info, mobj] = mdf_init(all_mdf(i).folder, all_mdf(i).name);
                parent_idx = find(strcmp(all_mdf(i).folder, folder_list));

                if strcmp(info.scanmode, 'XY Movie')
                    beh_enable = strcmp(mobj.ReadParameter('Video Enabled'), '-1');
                    xy_entry = struct2table(struct( ...
                        'movieFileIdx', i, ...
                        'FileName', string(all_mdf(i).name), ...
                        'FilePath', string(fullfile(all_mdf(i).folder, all_mdf(i).name)), ...
                        'ParentIdx', parent_idx, ...
                        'User', string(info.User), ...
                        'CreationDate', string(info.Date), ...
                        'BehaviorEnable', beh_enable, ...
                        'FPS', string(info.fps), ...
                        'LaserPower', string(info.laserpower), ...
                        'FrameCount', string(info.fcount), ...
                        'Excitation', string(info.excitation), ...
                        'Zoom', string(info.zoom), ...
                        'Comment', string(info.Comments), ...
                        'BackupDrive', string(obj.BackupName) ...
                    ));
                    obj.XYMovieTable = [obj.XYMovieTable; xy_entry];
                    analog_count = mobj.ReadParameter('Analog Sample Count');
                    analog_frequency = mobj.ReadParameter('Analog Acquisition Frequency (Hz)');
                    if ~strcmp(analog_count, '0')
                        for ch = 0:7
                            field_name = mobj.ReadParameter(sprintf('Analog Ch %d Name', ch));
                            field_name(strfind(field_name,' ')) = '_';
                            if ~isempty(field_name)
                            analog_entry = struct2table(struct( ...
                                'movieFileIdx', i, ...
                                'Channel', ch, ...
                                'FieldName', string(field_name), ...
                                'AnalogCount', analog_count, ...
                                'AnalogFreq', analog_frequency ...
                            ));                                
                            obj.AnalogTable = [obj.AnalogTable; analog_entry];
                            end
                        end
                    end

                elseif strcmp(info.scanmode, 'Image Stack')
                    z_entry = struct2table(struct( ...
                        'StackfileIdx', i, ...
                        'FileName', string(all_mdf(i).name), ...
                        'FilePath', string(fullfile(all_mdf(i).folder, all_mdf(i).name)), ...
                        'ParentIdx', parent_idx, ...
                        'User', string(info.User), ...
                        'CreationDate', string(info.Date), ...
                        'AverageCount', string(info.fave), ...
                        'InitialIntensity', string(info.pinit), ...
                        'FinalIntensity', string(info.pfinl), ...
                        'FrameCount', string(info.fcount), ...
                        'Zinterval', string(info.zinter), ...
                        'Powercontrol', string(info.pcontol), ...
                        'Excitation', string(info.excitation), ...
                        'Zoom', string(info.zoom), ...
                        'Repeat', string(info.repeat), ...
                        'Comment', string(info.Comments), ...
                        'BackupDrive', string(obj.BackupName) ...
                    )); 
                    obj.ImageStackTable = [obj.ImageStackTable; z_entry];
                end

                mobj.release;
            end
        end

       function obj = saveToDB(obj)
            obj.Conn = sqlite(obj.DbFile, 'create');
            
            exec(obj.Conn, [ ...
                'CREATE TABLE IF NOT EXISTS FolderTable ( ' ...
                'PrimaryPath TEXT PRIMARY KEY, ' ...
                'Date TEXT, ' ...
                'MouseNum TEXT, ' ...
                'Condition TEXT, ' ...
                'IsMouseExperiment INTEGER, ' ...
                'PrimaryDrive TEXT)' ...
            ]);
        
            exec(obj.Conn, [ ...
                'CREATE TABLE IF NOT EXISTS XYMovieTable ( ' ...
                'movieFileIdx INTEGER PRIMARY KEY, ' ...
                'FileName TEXT, ' ...
                'FilePath TEXT, ' ...
                'ParentIdx TEXT, ' ...
                'User TEXT, ' ...
                'CreationDate TEXT, ' ...
                'BehaviorEnable INTEGER, ' ...
                'FPS TEXT, ' ...
                'LaserPower TEXT, ' ...
                'FrameCount TEXT, ' ...
                'Excitation TEXT, ' ...
                'Zoom TEXT, ' ...
                'Comment TEXT, ' ...
                'BackupDrive TEXT, ' ...
                'FOREIGN KEY (ParentIdx) REFERENCES FolderTable(PrimaryPath))' ...
            ]);
        
            exec(obj.Conn, [ ...
                'CREATE TABLE IF NOT EXISTS ImageStackTable ( ' ...
                'StackfileIdx INTEGER PRIMARY KEY, ' ...
                'FileName TEXT, ' ...
                'FilePath TEXT, ' ...
                'ParentIdx TEXT, ' ...
                'User TEXT, ' ...
                'CreationDate TEXT, ' ...
                'AverageCount TEXT, ' ...
                'InitialIntensity TEXT, ' ...
                'FinalIntensity TEXT, ' ...
                'FrameCount TEXT, ' ...
                'Zinterval TEXT, ' ...
                'Powercontrol TEXT, ' ...
                'Excitation TEXT, ' ...
                'Zoom TEXT, ' ...
                'Repeat TEXT, ' ...
                'Comment TEXT, ' ...
                'BackupDrive TEXT, ' ...
                'FOREIGN KEY (ParentIdx) REFERENCES FolderTable(PrimaryPath))' ...
            ]);
        
            exec(obj.Conn, [ ...
                'CREATE TABLE IF NOT EXISTS AnalogTable ( ' ...
                'movieFileIdx INTEGER, ' ...
                'Channel INTEGER, ' ...
                'FieldName TEXT, ' ...
                'AnalogCount TEXT, ' ...
                'AnalogFreq TEXT, ' ...
                'FOREIGN KEY (movieFileIdx) REFERENCES XYMovieTable(movieFileIdx))' ...
            ]);
        
            exec(obj.Conn, [ ...
                'CREATE TABLE IF NOT EXISTS IntegrationLogTable ( ' ...
                'BackupDrive TEXT, ' ...
                'IntegrationTime TEXT)' ...
            ]);
        
            %% 2. 데이터 삽입
        
            sqlwrite(obj.Conn, 'FolderTable', obj.FolderTable);
            sqlwrite(obj.Conn, 'XYMovieTable', obj.XYMovieTable);
            sqlwrite(obj.Conn, 'ImageStackTable', obj.ImageStackTable);
            sqlwrite(obj.Conn, 'AnalogTable', obj.AnalogTable);
        
            obj.IntegrationLogTable = table(string(obj.BackupName), datetime('now'), ...
                'VariableNames', {'BackupDrive', 'IntegrationTime'});
            sqlwrite(obj.Conn, 'IntegrationLogTable', obj.IntegrationLogTable);
        
            %% 3. 종료
            close(obj.Conn);
            fprintf('DB construction complete: %s\n', obj.DbFile);
        end

    end
end
